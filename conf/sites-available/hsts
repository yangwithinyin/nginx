# forced ssl configuration
server {
   listen 80;
   listen 443 ssl;
   server_name www.example.com;
   ssl_certificate www.example.com.crt;
   ssl_certificate_key www.example.com.key;
   ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
   ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA!DES:!MD5:!PSK:!RC4:!3DES!EXP:!PSK:!SRP:!DSS;
   ssl_prefer_server_ciphers on;
   ssl_session_cache shared:SSL:10m;
   ## enable HSTS
   add_header Strict-Transport-Security "max-age=31536000; includeSubdomains";
   access_log /var/log/nginx/www.example.com-access.log;
   error_log /var/log/nginx/www.example.com-error.log;
   # If HTTP return code 301 and redirect to SSL/HTTPS
   if ($scheme = http) {
      return 301 https://$server_name$request_uri;
   }
}
